Only in rodinia_3.1-patched/opencl/backprop: backprop
Only in rodinia_3.1-patched/opencl/backprop: backprop.o
diff -ru rodinia_3.1/opencl/backprop/backprop_ocl.cpp rodinia_3.1-patched/opencl/backprop/backprop_ocl.cpp
--- rodinia_3.1/opencl/backprop/backprop_ocl.cpp	2015-12-11 16:46:38.000000000 +0100
+++ rodinia_3.1-patched/opencl/backprop/backprop_ocl.cpp	2016-07-22 09:13:09.340613431 +0200
@@ -12,6 +12,7 @@
 	#include <CL/cl.h>
 #endif
 
+static struct timeval t_start, t_end;
 
 ////////////////////////////////////////////////////////////////////////////////
 
@@ -183,6 +184,13 @@
 	if(err != CL_SUCCESS) { printf("ERROR: clCreateBuffer input_prev_weights_ocl\n"); return -1;}
 		
 	printf("Performing GPU computation\n");
+
+        int run;
+        int runs = atoi(getenv("RODINIA_RUNS"));
+        FILE* runtimes = fopen("runtimes", "w");
+
+        for (run = 0; run < runs; run++) {
+          gettimeofday(&t_start, NULL);
 	
 	//write buffers
 	err = clEnqueueWriteBuffer(cmd_queue, input_ocl, 1, 0, (in + 1) * sizeof(float), net->input_units, 0, 0, 0);
@@ -235,7 +243,13 @@
 	clSetKernelArg(kernel2, 5, sizeof(void *), (void*) &input_prev_weights_ocl );
   
 	err = clEnqueueNDRangeKernel(cmd_queue, kernel2, 2, NULL, global_work, local_work, 0, 0, 0);
-	if(err != CL_SUCCESS) { printf("ERROR: 1  clEnqueueNDRangeKernel()=>%d failed\n", err); return -1; }	
+	if(err != CL_SUCCESS) { printf("ERROR: 1  clEnqueueNDRangeKernel()=>%d failed\n", err); return -1; }
+        clFinish(cmd_queue);
+        gettimeofday(&t_end, NULL);
+        fprintf(runtimes, "%d\n",
+                (t_end.tv_sec*1000000+t_end.tv_usec) - (t_start.tv_sec*1000000+t_start.tv_usec));
+        }
+        fclose(runtimes);
   
 	err = clEnqueueReadBuffer(cmd_queue, input_ocl, 1, 0, (in + 1) * sizeof(float), net->input_units, 0, 0, 0);
 	if(err != CL_SUCCESS) { printf("ERROR: 1  clEnqueueReadBuffer: input_ocl\n"); return -1; }	
Only in rodinia_3.1-patched/opencl/backprop: facetrain.o
Only in rodinia_3.1-patched/opencl/backprop: imagenet.o
diff -ru rodinia_3.1/opencl/backprop/run rodinia_3.1-patched/opencl/backprop/run
--- rodinia_3.1/opencl/backprop/run	2015-12-11 16:46:38.000000000 +0100
+++ rodinia_3.1-patched/opencl/backprop/run	2016-07-22 09:13:09.365825571 +0200
@@ -1 +1 @@
-./backprop 65536
\ No newline at end of file
+./backprop 1048576
\ No newline at end of file
Only in rodinia_3.1-patched/opencl/backprop: runtimes
Only in rodinia_3.1-patched/opencl/cfd: density
Only in rodinia_3.1-patched/opencl/cfd: density_energy
Only in rodinia_3.1-patched/opencl/cfd: euler3d
diff -ru rodinia_3.1/opencl/cfd/euler3d.cpp rodinia_3.1-patched/opencl/cfd/euler3d.cpp
--- rodinia_3.1/opencl/cfd/euler3d.cpp	2015-12-11 16:46:29.000000000 +0100
+++ rodinia_3.1-patched/opencl/cfd/euler3d.cpp	2016-07-22 09:13:09.389634102 +0200
@@ -12,6 +12,9 @@
 	on 24/03/2011
 ********************************************************************/
 
+#include <sys/time.h>
+static struct timeval t_start, t_end;
+
 #include <iostream>
 #include <fstream>
 #include <math.h>
@@ -22,7 +25,7 @@
  * 
  */ 
 #define GAMMA 1.4f
-#define iterations 2000
+#define iterations 1300
 #ifndef block_length
 	#define block_length 192
 #endif
@@ -345,6 +348,10 @@
 		// these need to be computed the first time in order to compute time step
 		std::cout << "Starting..." << std::endl;
 
+                int runs = atoi(getenv("RODINIA_RUNS"));
+                FILE* runtimes = fopen("runtimes", "w");
+                for (int run = 0; run < runs; run++) {
+                gettimeofday(&t_start, NULL);
 		// Begin iterations
 		for(int i = 0; i < iterations; i++){
 			copy<float>(old_variables, variables, nelr*NVAR);
@@ -358,8 +365,13 @@
 			}
 		}
 		_clFinish();
+                gettimeofday(&t_end, NULL);
+                fprintf(runtimes, "%d\n",
+                        (t_end.tv_sec*1000000+t_end.tv_usec) - (t_start.tv_sec*1000000+t_start.tv_usec));
+                }
+                fclose(runtimes);
 		std::cout << "Saving solution..." << std::endl;
-		dump(variables, nel, nelr);
+                dump(variables, nel, nelr);
 		std::cout << "Saved solution..." << std::endl;
 		_clStatistics();
 		std::cout << "Cleaning up..." << std::endl;
Only in rodinia_3.1-patched/opencl/cfd: momentum
Only in rodinia_3.1-patched/opencl/cfd: PD_OCL.txt
Only in rodinia_3.1-patched/opencl/cfd: runtimes
Binary files rodinia_3.1/opencl/hotspot/hotspot and rodinia_3.1-patched/opencl/hotspot/hotspot differ
diff -ru rodinia_3.1/opencl/hotspot/hotspot.c rodinia_3.1-patched/opencl/hotspot/hotspot.c
--- rodinia_3.1/opencl/hotspot/hotspot.c	2015-12-11 16:46:31.000000000 +0100
+++ rodinia_3.1-patched/opencl/hotspot/hotspot.c	2016-07-22 09:13:09.411931761 +0200
@@ -86,10 +86,13 @@
 	local_work_size[1] = BLOCK_SIZE;
 	
 	
-	long long start_time = get_time();	
-	
+
+        int run;
+        int runs = atoi(getenv("RODINIA_RUNS"));
+        FILE* runtimes = fopen("runtimes", "w");
+        for (run = 0; run < runs; run++) {
+        long long start_time = get_time();
 	for (t = 0; t < total_iterations; t += num_iterations) {
-		
 		// Specify kernel arguments
 		int iter = MIN(num_iterations, total_iterations - t);
 		clSetKernelArg(kernel, 0, sizeof(int), (void *) &iter);
@@ -124,8 +127,9 @@
 	if (error != CL_SUCCESS) fatal_CL(error, __LINE__);
 	
 	long long end_time = get_time();
-	long long total_time = (end_time - start_time);	
-	printf("\nKernel time: %.3f seconds\n", ((float) total_time) / (1000*1000));
+	long long total_time = (end_time - start_time);
+        fprintf(runtimes, "%lld\n", total_time);
+        }
 	
 	return src;
 }
diff -ru rodinia_3.1/opencl/hotspot/run rodinia_3.1-patched/opencl/hotspot/run
--- rodinia_3.1/opencl/hotspot/run	2015-12-11 16:46:31.000000000 +0100
+++ rodinia_3.1-patched/opencl/hotspot/run	2016-07-22 09:13:09.432809631 +0200
@@ -1 +1 @@
-./hotspot 512 2 2 ../../data/hotspot/temp_512 ../../data/hotspot/power_512 output.out
+./hotspot 1024 2 360 ../../data/hotspot/temp_1024 ../../data/hotspot/power_1024 /dev/null
Only in rodinia_3.1-patched/opencl/hotspot: runtimes
Binary files rodinia_3.1/opencl/kmeans/cluster.o and rodinia_3.1-patched/opencl/kmeans/cluster.o differ
Binary files rodinia_3.1/opencl/kmeans/getopt.o and rodinia_3.1-patched/opencl/kmeans/getopt.o differ
Binary files rodinia_3.1/opencl/kmeans/kmeans and rodinia_3.1-patched/opencl/kmeans/kmeans differ
Binary files rodinia_3.1/opencl/kmeans/kmeans_clustering.o and rodinia_3.1-patched/opencl/kmeans/kmeans_clustering.o differ
diff -ru rodinia_3.1/opencl/kmeans/Makefile rodinia_3.1-patched/opencl/kmeans/Makefile
--- rodinia_3.1/opencl/kmeans/Makefile	2015-12-11 16:46:41.000000000 +0100
+++ rodinia_3.1-patched/opencl/kmeans/Makefile	2016-07-22 09:13:09.453686282 +0200
@@ -22,4 +22,4 @@
 	$(CC) $(CC_FLAGS) rmse.c -c
 
 clean:
-	rm -f *.o *~ kmeans *.linkinfo
+	rm -f *.o *~ kmeans *.linkinfo unistd.h
diff -ru rodinia_3.1/opencl/kmeans/read_input.c rodinia_3.1-patched/opencl/kmeans/read_input.c
--- rodinia_3.1/opencl/kmeans/read_input.c	2015-12-11 16:46:41.000000000 +0100
+++ rodinia_3.1-patched/opencl/kmeans/read_input.c	2016-07-22 09:13:09.479119701 +0200
@@ -82,7 +82,8 @@
 
 extern double wtime(void);
 
-
+#include <sys/time.h>
+static struct timeval t_start, t_end;
 
 /*---< usage() >------------------------------------------------------------*/
 void usage(char *argv0) {
@@ -235,6 +236,12 @@
 	/* ======================= core of the clustering ===================*/
 
     //cluster_timing = omp_get_wtime();		/* Total clustering time */
+
+        int runs = atoi(getenv("RODINIA_RUNS"));
+        int run;
+        FILE* runtimes = fopen("runtimes", "w");
+        for (run = 0; run < runs; run++) {
+          gettimeofday(&t_start, NULL);
 	cluster_centres = NULL;
     index = cluster(npoints,				/* number of data points */
 					nfeatures,				/* number of features for each point */
@@ -246,7 +253,11 @@
 				   &cluster_centres,		/* return: [best_nclusters][nfeatures] */  
 				   &rmse,					/* Root Mean Squared Error */
 					isRMSE,					/* calculate RMSE */
-					nloops);				/* number of iteration for each number of clusters */		
+					nloops);				/* number of iteration for each number of clusters */
+    gettimeofday(&t_end, NULL);
+    fprintf(runtimes, "%d\n",
+            (t_end.tv_sec*1000000+t_end.tv_usec) - (t_start.tv_sec*1000000+t_start.tv_usec));
+        }
     
 	//cluster_timing = omp_get_wtime() - cluster_timing;
 
Binary files rodinia_3.1/opencl/kmeans/read_input.o and rodinia_3.1-patched/opencl/kmeans/read_input.o differ
Binary files rodinia_3.1/opencl/kmeans/rmse.o and rodinia_3.1-patched/opencl/kmeans/rmse.o differ
Only in rodinia_3.1-patched/opencl/kmeans: runtimes
Only in rodinia_3.1/opencl/kmeans: unistd.h
diff -ru rodinia_3.1/opencl/lavaMD/kernel/kernel_gpu_opencl_wrapper.c rodinia_3.1-patched/opencl/lavaMD/kernel/kernel_gpu_opencl_wrapper.c
--- rodinia_3.1/opencl/lavaMD/kernel/kernel_gpu_opencl_wrapper.c	2015-12-11 16:46:33.000000000 +0100
+++ rodinia_3.1-patched/opencl/lavaMD/kernel/kernel_gpu_opencl_wrapper.c	2016-07-22 09:13:09.531213767 +0200
@@ -1,3 +1,6 @@
+#include <sys/time.h>
+static struct timeval t_start, t_end;
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -403,6 +406,11 @@
 	//	KERNEL
 	//======================================================================================================================================================150
 
+        int runs = atoi(getenv("RODINIA_RUNS"));
+        int run;
+        FILE* runtimes = fopen("runtimes", "w");
+        for (run = 0; run < runs; run++) {
+        gettimeofday(&t_start, NULL);
 	// ???
 	clSetKernelArg(	kernel, 
 					0, 
@@ -446,7 +454,10 @@
 	error = clFinish(command_queue);
 	if (error != CL_SUCCESS) 
 		fatal_CL(error, __LINE__);
-
+        gettimeofday(&t_end, NULL);
+        fprintf(runtimes, "%d\n",
+                (t_end.tv_sec*1000000+t_end.tv_usec) - (t_start.tv_sec*1000000+t_start.tv_usec));
+        }
 	time4 = get_time();
 
 	//======================================================================================================================================================150
Only in rodinia_3.1-patched/opencl/lavaMD/kernel: kernel_gpu_opencl_wrapper.o
Only in rodinia_3.1-patched/opencl/lavaMD: lavaMD
Only in rodinia_3.1-patched/opencl/lavaMD: main.o
diff -ru rodinia_3.1/opencl/lavaMD/makefile rodinia_3.1-patched/opencl/lavaMD/makefile
--- rodinia_3.1/opencl/lavaMD/makefile	2015-12-11 16:46:33.000000000 +0100
+++ rodinia_3.1-patched/opencl/lavaMD/makefile	2016-07-22 09:18:39.557315106 +0200
@@ -82,7 +82,7 @@
 
 # delete all object and executable files
 clean:
-	rm	*.o lavaMD \
+	rm -f	*.o lavaMD \
 		./kernel/*.o \
 		./util/num/*.o \
 		./util/timer/*.o \
Only in rodinia_3.1-patched/opencl/lavaMD: runtimes
Only in rodinia_3.1-patched/opencl/lavaMD/util/num: num.o
Only in rodinia_3.1-patched/opencl/lavaMD/util/opencl: opencl.o
Only in rodinia_3.1-patched/opencl/lavaMD/util/timer: timer.o
diff -ru rodinia_3.1/opencl/nn/nearestNeighbor.cpp rodinia_3.1-patched/opencl/nn/nearestNeighbor.cpp
--- rodinia_3.1/opencl/nn/nearestNeighbor.cpp	2015-12-11 16:46:29.000000000 +0100
+++ rodinia_3.1-patched/opencl/nn/nearestNeighbor.cpp	2016-07-22 09:13:09.553357909 +0200
@@ -3,6 +3,9 @@
 
 #include "nearestNeighbor.h"
 
+#include <sys/time.h>
+static struct timeval t_start, t_end;
+
 cl_context context=NULL;
 
 int main(int argc, char *argv[]) {
@@ -37,11 +40,20 @@
   if (resultsCount > numRecords) resultsCount = numRecords;
 
   context = cl_init_context(platform,device,quiet);
-  
-  recordDistances = OpenClFindNearestNeighbors(context,numRecords,locations,lat,lng,timing);
-
-  // find the resultsCount least distances
-  findLowest(records,recordDistances,numRecords,resultsCount);
+  int run;
+  int runs = atoi(getenv("RODINIA_RUNS"));
+  FILE* runtimes = fopen("runtimes", "w");
+  for (run = 0; run < runs; run++) {
+    gettimeofday(&t_start, NULL);
+    recordDistances = OpenClFindNearestNeighbors(context,numRecords,locations,lat,lng,timing);
+
+    // find the resultsCount least distances
+    findLowest(records,recordDistances,numRecords,resultsCount);
+    gettimeofday(&t_end, NULL);
+    fprintf(runtimes,
+            "%d\n",
+            (t_end.tv_sec*1000000+t_end.tv_usec) - (t_start.tv_sec*1000000+t_start.tv_usec));
+  }
 
   // print out results
   if (!quiet)
Binary files rodinia_3.1/opencl/nn/nn and rodinia_3.1-patched/opencl/nn/nn differ
diff -ru rodinia_3.1/opencl/nn/run rodinia_3.1-patched/opencl/nn/run
--- rodinia_3.1/opencl/nn/run	2015-12-11 16:46:30.000000000 +0100
+++ rodinia_3.1-patched/opencl/nn/run	2016-07-22 09:13:09.577734709 +0200
@@ -1 +1 @@
-./nn filelist.txt -r 5 -lat 30 -lng 90
\ No newline at end of file
+./nn filelist.txt -r 100 -lat 30 -lng 90 -d 0 -p 0
Only in rodinia_3.1-patched/opencl/nn: runtimes
diff -ru rodinia_3.1/opencl/pathfinder/main.cpp rodinia_3.1-patched/opencl/pathfinder/main.cpp
--- rodinia_3.1/opencl/pathfinder/main.cpp	2015-12-11 16:46:29.000000000 +0100
+++ rodinia_3.1-patched/opencl/pathfinder/main.cpp	2016-07-22 09:13:09.607005578 +0200
@@ -17,6 +17,9 @@
 #include <iostream>
 #include "OpenCL.h"
 
+#include <sys/time.h>
+static struct timeval t_start, t_end;
+
 using namespace std;
 
 // halo width along one direction when advancing to the next iteration
@@ -131,18 +134,26 @@
 	                                NULL,
 	                                NULL);
 
+        FILE* runtimes = fopen("runtimes", "w");
+        int run;
+        int runs = atoi(getenv("RODINIA_RUNS"));
 	cl_int* h_outputBuffer = (cl_int*)malloc(16384*sizeof(cl_int));
-	for (int i = 0; i < 16384; i++)
-	{
-		h_outputBuffer[i] = 0;
-	}
 	cl_mem d_outputBuffer = clCreateBuffer(cl.ctxt(),
 	                                       CL_MEM_READ_WRITE | CL_MEM_USE_HOST_PTR,
 	                                       sizeof(cl_int)*16384,
 	                                       h_outputBuffer,
 	                                       NULL);
-
 	int src = 1, final_ret = 0;
+
+        for (run = 0; run < runs; run++) {
+	for (int i = 0; i < 16384; i++)
+	{
+		h_outputBuffer[i] = 0;
+	}
+        gettimeofday(&t_start, NULL);
+
+	src = 1;
+        final_ret = 0;
 	for (int t = 0; t < rows - 1; t += pyramid_height)
 	{
 		int temp = src;
@@ -168,6 +179,11 @@
 		clSetKernelArg(cl.kernel(kn), 11, sizeof(cl_mem), (void*) &d_outputBuffer);
 		cl.launch(kn);
 	}
+        clFinish(cl.q());
+        gettimeofday(&t_end, NULL);
+        fprintf(runtimes, "%d\n",
+                (t_end.tv_sec*1000000+t_end.tv_usec) - (t_start.tv_sec*1000000+t_start.tv_usec));
+        }
 
 	// Copy results back to host.
 	clEnqueueReadBuffer(cl.q(),                   // The command queue.
Only in rodinia_3.1-patched/opencl/pathfinder: main.o
Only in rodinia_3.1-patched/opencl/pathfinder: OpenCL.o
Only in rodinia_3.1-patched/opencl/pathfinder: pathfinder
Only in rodinia_3.1-patched/opencl/pathfinder: result.txt
Only in rodinia_3.1-patched/opencl/pathfinder: runtimes
diff -ru rodinia_3.1/opencl/srad/kernel/kernel_gpu_opencl_wrapper.c rodinia_3.1-patched/opencl/srad/kernel/kernel_gpu_opencl_wrapper.c
--- rodinia_3.1/opencl/srad/kernel/kernel_gpu_opencl_wrapper.c	2015-12-11 16:46:39.000000000 +0100
+++ rodinia_3.1-patched/opencl/srad/kernel/kernel_gpu_opencl_wrapper.c	2016-07-22 09:13:09.631332235 +0200
@@ -1,3 +1,9 @@
+#include <stdlib.h>
+#include <sys/time.h>
+#include <error.h>
+#include <errno.h>
+static struct timeval t_start, t_end;
+
 //========================================================================================================================================================================================================200
 //	DEFINE/INCLUDE
 //========================================================================================================================================================================================================200
@@ -537,7 +543,11 @@
 	//====================================================================================================100
 	//	set arguments
 	//====================================================================================================100
-
+        FILE* runtimes = fopen("runtimes", "w");
+        int runs = atoi(getenv("RODINIA_RUNS"));
+        int i;
+        for (i = 0; i < runs; i++) {
+gettimeofday(&t_start, NULL);
 	error = clSetKernelArg(	extract_kernel, 
 							0, 
 							sizeof(long), 
@@ -1024,6 +1034,14 @@
 		//====================================================================================================100
 
 	}
+        error = clFinish(command_queue);
+	if (error != CL_SUCCESS)
+          fatal_CL(error, __LINE__);
+
+        gettimeofday(&t_end, NULL);
+        fprintf(runtimes, "%d\n",
+                (t_end.tv_sec*1000000+t_end.tv_usec) - (t_start.tv_sec*1000000+t_start.tv_usec));
+        }
 
 	printf("\n");
 
Only in rodinia_3.1-patched/opencl/srad/kernel: kernel_gpu_opencl_wrapper.o
diff -ru rodinia_3.1/opencl/srad/main.c rodinia_3.1-patched/opencl/srad/main.c
--- rodinia_3.1/opencl/srad/main.c	2015-12-11 16:46:39.000000000 +0100
+++ rodinia_3.1-patched/opencl/srad/main.c	2016-07-22 09:13:09.651858811 +0200
@@ -222,12 +222,14 @@
 	// 	WRITE OUTPUT IMAGE TO FILE
 	//======================================================================================================================================================150
 
-	write_graphics(	"./output/image_out.pgm",
-					image,
-					Nr,
-					Nc,
-					1,
-					255);
+        if (0) { // Disabled for benchmarking
+          write_graphics(	"./output/image_out.pgm",
+                                image,
+                                Nr,
+                                Nc,
+                                1,
+                                255);
+        }
 
 	time5 = get_time();
 
@@ -258,6 +260,7 @@
 	printf("Total time:\n");
 	printf("%.12f s\n", 																(fp) (time5-time0) / 1000000);
 
+        return 0;
 }
 
 //========================================================================================================================================================================================================200
Only in rodinia_3.1-patched/opencl/srad: main.o
diff -ru rodinia_3.1/opencl/srad/makefile rodinia_3.1-patched/opencl/srad/makefile
--- rodinia_3.1/opencl/srad/makefile	2015-12-11 16:46:38.000000000 +0100
+++ rodinia_3.1-patched/opencl/srad/makefile	2016-07-22 09:17:24.785362610 +0200
@@ -79,7 +79,7 @@
 			$(OCL_INC_DIR)
 
 clean:
-	rm	./*.o srad\
+	rm -f	./*.o srad\
 		./kernel/*.o \
 		./util/opencl/*.o \
 		./util/graphics/*.o \
Only in rodinia_3.1-patched/opencl/srad: runtimes
Only in rodinia_3.1-patched/opencl/srad: srad
Only in rodinia_3.1-patched/opencl/srad/util/graphics: graphics.o
Only in rodinia_3.1-patched/opencl/srad/util/graphics: resize.o
Only in rodinia_3.1-patched/opencl/srad/util/opencl: opencl.o
Only in rodinia_3.1-patched/opencl/srad/util/timer: timer.o
diff -ru rodinia_3.1/README rodinia_3.1-patched/README
--- rodinia_3.1/README	2015-12-13 04:42:33.000000000 +0100
+++ rodinia_3.1-patched/README	2016-07-22 09:13:09.680721875 +0200
@@ -1,3 +1,6 @@
+NOTICE: this tree has been modified by the futhark-ppopp17 Makefile
+to add consistent timing to some benchmark implementations.
+
 Rodinia Benchmark Suite 3.1
 ===========================
 
